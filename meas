







import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

class Customer {
    private static int counter = 1; // auto-incrementing number
    private final int number;
    private final String name;

    public Customer(String name) {
        this.name = name;
        this.number = counter++;
    }

    public int getNumber() {
        return number;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "[" + number + "] " + name;
    }
}

public class CustomerQueueApp {
    public static void main(String[] args) {
        Queue<Customer> queue = new LinkedList<>();
        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        while (running) {
            System.out.println("\n--- Customer Queue System ---");
            System.out.println("1. Add customer to queue");
            System.out.println("2. Serve next customer");
            System.out.println("3. View queue");
            System.out.println("4. Exit");
            System.out.print("Choose an option: ");

            int choice;
            try {
                choice = Integer.parseInt(scanner.nextLine());
            } catch (Exception e) {
                System.out.println("Invalid input. Please enter a number.");
                continue;
            }

            switch (choice) {
                case 1 -> {
                    System.out.print("Enter customer name: ");
                    String name = scanner.nextLine();
                    Customer customer = new Customer(name);
                    queue.add(customer);
                    System.out.println("Added: " + customer);
                    displayQueue(queue);
                }
                case 2 -> {
                    if (queue.isEmpty()) {
                        System.out.println("No customers in queue.");
                    } else {
                        Customer served = queue.poll();
                        System.out.println("Serving: " + served);
                    }
                    displayQueue(queue);
                }
                case 3 -> {
                    displayQueue(queue);
                }
                case 4 -> {
                    running = false;
                    System.out.println("Exiting... Goodbye!");
                }
                default -> System.out.println("Invalid choice. Try again.");
            }
        }
        scanner.close();
    }

    private static void displayQueue(Queue<Customer> queue) {
        if (queue.isEmpty()) {
            System.out.println("Queue is empty.");
        } else {
            System.out.println("Current Queue: " + queue);
        }
    }
}
